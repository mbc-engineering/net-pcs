<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.6">
  <POU Name="CommandBase" Id="{ada50c45-e2a4-0e1e-2882-6555ee7dd9e0}" SpecialFunc="None">
    <Declaration><![CDATA[(*---------------------------------------------------------------------------
 Copyright (c) 2018 BY mbc engineering GmbH, CH-6015 Luzern
 Licensed under the Apache License, Version 2.0
-----------------------------------------------------------------------------*)
// Basic implementation of a default command class for PCS interagtion with internal structure of ``ST_CommandBaseHandshake``.
// Aditional IN and OUT parameters should be declared in the derived implementation.
FUNCTION_BLOCK PUBLIC CommandBase IMPLEMENTS ICommand
VAR_IN_OUT
	(* Use Class Properties for IN_OUT Parameters!!! *)
END_VAR
VAR
	stHandshake		: ST_CommandBaseHandshake;		// Internal variable strukture for communication with PCS.
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[// OO-Class 
Call();]]></ST>
    </Implementation>
    <Method Name="CalculateProgress" Id="{a16648df-eb2b-0767-0ec1-b2c892b01c2b}">
      <Declaration><![CDATA[// Can be used to calculate the ``stHandshake.nProgress`` and ``stHandshake.nSubTask``
METHOD PROTECTED CalculateProgress
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF stHandshake.nResultCode = E_CommandResultCode.Done THEN
	stHandshake.nProgress := 100;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Call" Id="{122b0574-ff69-07fc-29ae-2aea1e238cec}">
      <Declaration><![CDATA[// The method is called in each cycle to execute the funktional part and the states of the command implementation.
METHOD Public Call
VAR
	bInit		: BOOL;
	HEN: INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Starting Case
stHandshake.bBusy S= bInit := (stHandshake.bExecute AND NOT stHandshake.bBusy AND stHandshake.bEnabled);
IF bInit THEN
	stHandshake.nResultCode := E_CommandResultCode.Init;
	Init();
END_IF

// Cancel by User Transition
IF (NOT stHandshake.bExecute AND stHandshake.bBusy)THEN
	Finish(E_CommandResultCode.Cancelled);	
END_IF

// Cancel State
IF (stHandshake.nResultCode = E_CommandResultCode.Cancelled)THEN
	Cancelled();
END_IF

// Running State
IF stHandshake.bExecute AND stHandshake.bBusy THEN
	
	IF Task() THEN
		// Done Transition
		Finish(E_CommandResultCode.Done);
	END_IF
END_IF

// Done State
IF (stHandshake.nResultCode = E_CommandResultCode.Done) THEN
	Done();
END_IF

CalculateProgress();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Cancelled" Id="{ea835809-8527-04fc-2537-4ead9acb0d0c}">
      <Declaration><![CDATA[// Will be called at the Cancel state when the execution is finished with the result code ``Cancelled`` or ``stHandshake.bExecute`` changes to ``false`` while ``stHandshake.bBusy`` is ```true``
METHOD PROTECTED Cancelled
]]></Declaration>
      <Implementation>
        <ST><![CDATA[;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Done" Id="{25dbcb74-56ee-0f87-207e-c2f6e4bd50c0}">
      <Declaration><![CDATA[// Will be called when ``Running`` state is done and the actual state is ``Done``.
METHOD PROTECTED Done
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Finish" Id="{38ab0c16-9dcb-0710-3b7a-4cc8228c26d9}">
      <Declaration><![CDATA[// Can be use to finish the ``Task`` Execution with a ``nResultCode``. By using the ``Finish(E_CommandResultCode.Cancelled)`` or ``Finish(E_CommandResultCode.Done)`` calls, to the coresponding states methods ``Done`` and ``Cancelled`` will be called.  
METHOD PROTECTED Finish
VAR_INPUT
	nResultCode		: UINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[stHandshake.bBusy := stHandshake.bExecute := FALSE;
stHandshake.nResultCode := nResultCode;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Init" Id="{73b42678-0303-042f-2b5e-b8719716b1e0}">
      <Declaration><![CDATA[// Will be called when ``stHandshake.bExecute`` changes to ``true`` one cycle and in the same cycle.
METHOD PROTECTED Init
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[stHandshake.nResultCode := E_CommandResultCode.Running;
stHandshake.nProgress := 0;
stHandshake.nSubTask := 0;]]></ST>
      </Implementation>
    </Method>
    <Property Name="Progress" Id="{11d7213a-75df-05a5-3911-c70fda26068b}">
      <Declaration><![CDATA[// Set the Progress from everywhere in the application (Regular from CalculateProgress Method)
PROPERTY PROTECTED Progress : BYTE]]></Declaration>
      <Get Name="Get" Id="{c53dadf5-7315-05cc-3a61-3ca6f99e45f9}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[Progress := stHandshake.nProgress;
]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{f433abb7-fe0c-0c14-2493-599cdeee1e2b}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[stHandshake.nProgress := Progress;
]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="SubTask" Id="{91ef01b2-b368-094f-0905-247a111f2a9e}">
      <Declaration><![CDATA[// Set the SubTask Information from everywhere in the application (Regular from CalculateProgress Method)
PROPERTY PROTECTED SubTask : UINT]]></Declaration>
      <Get Name="Get" Id="{3e9e1d4d-b86f-0b19-192c-a177a58c94f5}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[SubTask := stHandshake.nSubTask;
]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{52959122-866e-0ed0-07d0-b14507bb4e0d}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[stHandshake.nSubTask := SubTask;
]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="Task" Id="{50b60cf9-4807-097f-189d-1bed3be2c16e}">
      <Declaration><![CDATA[// Execute the funktional part of the command implementation. Will also be executed in the same cycle ``stHandshake.bExecute`` changes to ``true`` after the ``Init`` Method
METHOD PROTECTED Task : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Task complete if return true
Task := TRUE;]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>